paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: Change a user's password.
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: Reset user's password via a password-reset token.
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Clubs:
    post:
      tags:
        - Clubs
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Clubs.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
    patch:
      tags:
        - Clubs
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Clubs.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
    put:
      tags:
        - Clubs
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Clubs.replaceOrCreate__put_Clubs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
    get:
      tags:
        - Clubs
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Clubs.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Clubs'
      deprecated: false
  /Clubs/replaceOrCreate:
    post:
      tags:
        - Clubs
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Clubs.replaceOrCreate__post_Clubs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
  /Clubs/upsertWithWhere:
    post:
      tags:
        - Clubs
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Clubs.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
  '/Clubs/{id}/exists':
    get:
      tags:
        - Clubs
      summary: Check whether a model instance exists in the data source.
      operationId: 'Clubs.exists__get_Clubs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Clubs/{id}':
    head:
      tags:
        - Clubs
      summary: Check whether a model instance exists in the data source.
      operationId: 'Clubs.exists__head_Clubs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Clubs
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Clubs.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
    put:
      tags:
        - Clubs
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Clubs.replaceById__put_Clubs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
    delete:
      tags:
        - Clubs
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Clubs.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Clubs
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Clubs.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clubs'
        - name: id
          in: path
          description: Clubs id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
  '/Clubs/{id}/replace':
    post:
      tags:
        - Clubs
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Clubs.replaceById__post_Clubs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
  /Clubs/findOne:
    get:
      tags:
        - Clubs
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Clubs.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Clubs'
      deprecated: false
  /Clubs/update:
    post:
      tags:
        - Clubs
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Clubs.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Clubs'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Clubs/count:
    get:
      tags:
        - Clubs
      summary: Count instances of the model matched by where from the data source.
      operationId: Clubs.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Events:
    post:
      tags:
        - Events
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Events.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
    patch:
      tags:
        - Events
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Events.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
    put:
      tags:
        - Events
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Events.replaceOrCreate__put_Events
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
    get:
      tags:
        - Events
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Events.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Events'
      deprecated: false
  /Events/replaceOrCreate:
    post:
      tags:
        - Events
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Events.replaceOrCreate__post_Events_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
  /Events/upsertWithWhere:
    post:
      tags:
        - Events
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Events.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
  '/Events/{id}/exists':
    get:
      tags:
        - Events
      summary: Check whether a model instance exists in the data source.
      operationId: 'Events.exists__get_Events_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Events/{id}':
    head:
      tags:
        - Events
      summary: Check whether a model instance exists in the data source.
      operationId: 'Events.exists__head_Events_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Events
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Events.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
    put:
      tags:
        - Events
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Events.replaceById__put_Events_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
    delete:
      tags:
        - Events
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Events.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Events
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Events.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Events'
        - name: id
          in: path
          description: Events id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
  '/Events/{id}/replace':
    post:
      tags:
        - Events
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Events.replaceById__post_Events_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
  /Events/findOne:
    get:
      tags:
        - Events
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Events.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Events'
      deprecated: false
  /Events/update:
    post:
      tags:
        - Events
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Events.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Events'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Events/count:
    get:
      tags:
        - Events
      summary: Count instances of the model matched by where from the data source.
      operationId: Events.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Clubs:
    properties:
      id:
        type: number
        format: double
      name:
        maxLength: 50
        type: string
      description:
        maxLength: 65535
        type: string
      signUpDate:
        type: string
        format: date-time
      capacity:
        type: number
        format: double
      city:
        maxLength: 50
        type: string
      country:
        maxLength: 50
        type: string
      adress:
        maxLength: 50
        type: string
      latitude:
        maxLength: 255
        type: string
      longitude:
        maxLength: 255
        type: string
      picture:
        maxLength: 65535
        type: string
    required:
      - id
      - name
      - description
      - signUpDate
      - capacity
      - city
      - country
      - adress
    additionalProperties: false
  Events:
    properties:
      id:
        type: number
        format: double
      name:
        maxLength: 255
        type: string
      date:
        type: string
        format: date-time
      gatesOpens:
        type: string
      startAge:
        type: number
        format: double
      endAge:
        type: number
        format: double
      style:
        maxLength: 50
        type: string
      price:
        type: number
        format: double
      info:
        maxLength: 65535
        type: string
      picture:
        maxLength: 65535
        type: string
      clubId:
        type: number
        format: double
    required:
      - id
      - name
      - date
      - gatesOpens
      - clubId
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: clubears
  version: 1.0.0
  title: clubears
schemes:
  - http
host: '127.0.0.1:9000'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
